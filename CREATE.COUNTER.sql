CREATE OR ALTER PROCEDURE Counter -- CREATE <table_name> or ALTER <table_name>
	@max int = 5  -- IF YOU PUT @ BEFORE AS, YOU DONT NEED TO DELCARE
as
BEGIN
	DECLARE @Nbr int = 0; -- Variable NBR 
	DECLARE @SUM INT = 0;
	WHILE @Nbr <= @max -- LOOPING STATEMENT. ITS IMPORTANT TO CREATE SOMETHING TO MAKE THIS CHANGE. LIKE AN INCRIMENT
	BEGIN --THIS BEGIN(AND END) IS TIED TO THE WHILE STATEMENT
		SET @SUM = @SUM + (@Nbr * @Nbr);   -- THE CURRENT VALUE OF SUM, ADD IT WITH NUMBER, THEN PUT THAT BACK IN SUM. 
		PRINT str(@NBR) + ' sum is ' + trim(str(@sum));  -- THE + SIGN ACTS LIKE A CONCAT FUNCTION. IT JOINS IT ALL TOGETHER
		SET @Nbr = @Nbr + 1; --@SET IS AN ASSIGNMENT
	END -- THIS END(AND BEGINNING) IS TIED TO THE WHILE STATEMENT. THIS WILL LOOP AGAIN AND AGAIN UNTIL THE 'WHILE' STATEMENT = FALSE. IN THIS CASE, WHEN GREATER THAN 10
	PRINT 'DONE...';
END
GO --STORE THE CREATE OR ALTER PROCEDURE. DO THIS PROCEDURE, BASICALLY LIKE A GIT COMMIT (LOCK IN EVERYTHING BEFORE THIS STATEMENT. THERE IS NO ROLLBACK AFTER THIS)
EXECUTE Counter @max = 15; -- EXECUTE, RUN THE PROCEDURE -- adding @max at end overrides the original default

